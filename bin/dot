#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"

cmd_run() {
    "$SCRIPT_DIR/bootstrap"

    cd "$DOTFILES_DIR"
    ruby -r ./lib/dotfiles.rb -e 'Dotfiles::Runner.new.run'
}

cmd_update() {
    local git_flags=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --no-gpg-sign)
                git_flags="$git_flags --no-gpg-sign"
                shift
                ;;
            --no-verify)
                git_flags="$git_flags --no-verify"
                shift
                ;;
            *)
                shift
                ;;
        esac
    done

    cd "$DOTFILES_DIR"
    GIT_COMMIT_FLAGS="$git_flags" ruby -r ./lib/dotfiles.rb -e 'Dotfiles::Updater.new.run'
}

cmd_help() {
    cat <<EOF
dot - Dotfiles management tool

Usage: dot <command> [options]

Commands:
  run       Set up development environment from scratch
  update    Update dotfiles from the system
  help      Show this help message

Options (for update command):
  --no-gpg-sign    Skip GPG signing when committing
  --no-verify      Skip git pre-commit and commit-msg hooks

Examples:
  dot run                              # Initial setup
  dot update                           # Update dotfiles
  dot update --no-gpg-sign             # Update without GPG signing
  dot update --no-gpg-sign --no-verify # Update without GPG or hooks
  DEBUG=true dot run                   # Run with debug output
EOF
}

main() {
    if [ $# -eq 0 ]; then
        cmd_help
        exit 1
    fi

    case "$1" in
        run)
            cmd_run
            ;;
        update)
            shift
            cmd_update "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            echo "Error: Unknown command '$1'"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

main "$@"
